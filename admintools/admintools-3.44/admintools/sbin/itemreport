#!/bin/ksh
#
#*****************************************************************************
#
# Name          Description                     Version Date
#
# Rob Dancer    Initial version			1.0     11 Nov 1997
#
# Rob Dancer    Changed "Exit OK" to "Exit"	1.1     17 Nov 1997
#
# Rob Dancer    Set return status correctly	1.2     18 Nov 1997
#
# Rob Dancer    References amended to           2.0     01 Dec 1997
#               "admintools"
#
# Rob Dancer    Changed spelling mistake	2.1     10 Dec 1997
#		"exits"
#
# Rob Dancer    Exit with variable not		2.2     18 Dec 1997
#		explicitly 0 when showing
#		version
#
# Rob Dancer    itemreport			3.0     22 Apr 1998
#
# Rob Dancer    Fixed problem with previous	3.1     22 Apr 1998
#		lines being used in output
#
# Rob Dancer    Set start time to process time	3.2     22 Apr 1998
#
# Rob Dancer    Separate processing with nl	3.3     28 Apr 1998
#
VERSION="3.3, 28 Apr 1998"
#
#*****************************************************************************
#
# Exit function
#
function _exit {
 exit $1
}
#
# Main function
#
function _Main {
#
# Insert user function here
#
cat $FILE | $AWK -F "," 'BEGIN{
		 STARTED="FALSE"
		 PRINTDATA="FALSE"
		 print "Server,Template,Item,Start Time,Stop Time,Size(GB),Size,Level,Result,Status"
		} {
#
		 if ( STARTED == "FALSE" ) {
		  TEMPLATE="**********"
		  DATE="**/**/**"
		  TIME="**:**:**"
		  DESCRIPTION="**********"
		  SERVER="**********"
		  ITEM="**********"
		  STARTDATE="**/**/**"
		  STARTTIME="**:**:**"
		  PROCDATE="**/**/**"
		  PROCTIME="**:**:**"
		  BACKUPDATE="**/**/**"
		  BACKUPTIME="**:**:**"
		  TOTALSDATE="**/**/**"
		  TOTALSTIME="**:**:**"
		  STOPDATE="**/**/**"
		  STOPTIME="**:**:**"
		  STATUST="********"
		  SIZE2="****GB"
		  SIZE="******"
		  STATUSS="********"
		  LEVEL="**"
		 }
#
		 if ( NF == 0 ) {
		  if ( PRINTDATA == "TRUE" ) {
		   #printf "%s,%s,%s,%s %s,%s %s,%3.6f,%s,%s,%s,%s\n",\
		 #SERVER,TEMPLATE,ITEM,BACKUPDATE,BACKUPTIME,STOPDATE,\
		 #STOPTIME,SIZE2,SIZE,LEVEL,STATUST,STATUSS
		   printf "%s,%s,%s,%s %s,%s %s,%3.6f,%s,%s,%s,%s\n",\
		 SERVER,TEMPLATE,ITEM,PROCDATE,PROCTIME,STOPDATE,\
		 STOPTIME,SIZE2,SIZE,LEVEL,STATUST,STATUSS
		   STARTED="FALSE"
		   PRINTDATA="FALSE"
		  }
		 } else {
#
		  TEMPLATE=$1
		  DATE=$2
		  TIME=$3
		  DESCRIPTION=$4
		  ITEMF=$5
		  LENITEMF=length(ITEMF)
		  SEPI1=index(ITEMF,":")
		  SERVER=substr(ITEMF,1,SEPI1-1)
		  ITEM=substr(ITEMF,SEPI1+1,LENITEMF-SEPI1)
#
# Get type of data
#
		  SEP1=index(DESCRIPTION,":")
		  LENDESC=length(DESCRIPTION)
		  TYPE=substr(DESCRIPTION,1,SEP1-1)
#
		  if ( TYPE == "Schedule Item" ) {
		   STARTDATE=DATE
		   STARTTIME=TIME
		   ITEMF=ITEM
		   STARTED="TRUE"
		  } else {
		   if ( TYPE == "Processing Item" ) {
		    PROCDATE=DATE
		    PROCTIME=TIME
		    ITEMF=ITEM
		    STARTED="TRUE"
		    PRINTDATA="TRUE"
		   } else {
		    if ( TYPE == "Backup Item" ) {
		     BACKUPDATE=DATE
		     BACKUPTIME=TIME
		     STARTED="TRUE"
		    } else {
		     if ( TYPE == "Totals Item" ) {
		      TOTALSDATE=DATE
		      TOTALSTIME=TIME
		      SEP2=\
			 index(substr(DESCRIPTION,SEP1+1,LENDESC),":")+SEP1
		      STATUST=substr(DESCRIPTION,SEP1+1,SEP2-SEP1-1)
		      SIZE=substr(DESCRIPTION,SEP2+1,LENDESC)
		      LENSIZE=length(SIZE)
		      SEPSIZE=index(SIZE," ")
		      UNITS=substr(SIZE,SEPSIZE+1,LENSIZE-SEPSIZE)
		      MAGN=substr(SIZE,1,SEPSIZE-1)
		      if ( UNITS == "GB" ) {
		       MULT=1
		      } else {
		       if ( UNITS == "MB" ) {
		        MULT=1024
		       } else {
		        if ( UNITS == "KB" ) {
		         MULT=1024*1024
		        } else {
			 MULT=1
		        }
		       }
		      }
		      SIZE2=MAGN/MULT" GB"
		      STARTED="TRUE"
		      PRINTDATA="TRUE"
		     } else {
		      if ( TYPE == "Stop Item" ) {
		       STOPDATE=DATE
		       STOPTIME=TIME
		       SEP2=\
			 index(substr(DESCRIPTION,SEP1+1,LENDESC),":")+SEP1
		       STATUSS=substr(DESCRIPTION,SEP1+1,SEP2-SEP1-1)
		       LEVEL=substr(DESCRIPTION,SEP2+1,LENDESC)
		       STARTED="TRUE"
		       PRINTDATA="TRUE"
		      }
		     }
		    }
	           }
	          }
		 }
#
		}'
#
#
# Set up return status
#
 RETSTAT=0
}
#
# Start here
#
#
# Source setup file
#
. /etc/admintools.src
SHOWVERSION="FALSE"
#
# Set up user variables
#
FILE="-"
#
# Initialise exit status
#
let "EXITSTAT=0"
#
# Get command line options
#
USAGE="$0 [-f file] [-V Version]"
set -- `getopt f:V $*`
if [ $? -ne 0 ]
then
 echo $USAGE
_exit 2
fi
while [ $# -gt 0 ]
do
 case $1 in
#
# Option
#
	-f)
		FILE=$2
		shift 2
	;;
#
# Show version
#
	-V)
		SHOWVERSION="TRUE"
		shift 1
	;;
	--)
		shift
		break
	;;
 esac
done
#
# Check for show version
#
if [ "$SHOWVERSION" = "TRUE" ]
then
 echo "$VERSION"
 echo "$USAGE"
 _exit $EXITSTAT
fi
#
# Check bounds of FILE
#
if [ -z "$FILE" ]
then
 echo "ERROR : Filename required"
 echo "$USAGE"
 EXITSTAT=2
 _exit $EXITSTAT
else
 if [ "$FILE" != "-" ]
 then
  if [ ! -r "$FILE" ]
  then
   echo "ERROR : File $FILE does not exist or cannot be opened"
   EXITSTAT=3
  _exit $EXITSTAT
  fi
 fi
fi
#
# Do Main
#
_Main
let "EXITSTAT=EXITSTAT+RETSTAT"
#
# Exit
#
_exit $EXITSTAT
#

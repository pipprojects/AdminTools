#!/bin/ksh
#
#*****************************************************************************
#
# Name          Description                     Version Date
#
# Rob Dancer    Initial version			1.0     11 Nov 1997
#
# Rob Dancer    Changed "Exit OK" to "Exit"	1.1     17 Nov 1997
#
# Rob Dancer    Set return status correctly	1.2     18 Nov 1997
#
# Rob Dancer    References amended to           2.0     01 Dec 1997
#               "admintools"
#
# Rob Dancer    Changed spelling mistake	2.1     10 Dec 1997
#		"exits"
#
# Rob Dancer    Exit with variable not		2.2     18 Dec 1997
#		explicitly 0 when showing
#		version
#
# Rob Dancer    Add default -f FILE option	2.3     22 Apr 1998
#
# Rob Dancer    Change getopt to getopts	2.4     23 Apr 1998
#
# Rob Dancer    getmetrics			3.0	29 Apr 1998
#
# Rob Dancer    awk changed for $AWK		3.1	11 May 1998
#
VERSION="3.1, 11 May 1998"
#
#*****************************************************************************
#
# Exit function
#
function _exit {
 exit $1
}
#
# Main function
#
function _Main {
#
# Insert user function here
#
cat $METFILE | grep -v "^#" | sed -e /^$/d | $AWK 'BEGIN {
			 SYSTEM=""
			 SOURCE=""
			 CLASS=""
			 INSTANCE=""
			 METRIC=""
			 SETSYSTEM="FALSE"
			 SETSOURCE="FALSE"
			 SETCLASS="FALSE"
			 SETINSTANCE="FALSE"
			 SETMETRIC="FALSE"
			 PRINTMETRIC="FALSE"
			 METRICSET="FALSE"
			} {
#
# Check for change in names
#
			 if ( $1 == ":node_name" ) {
			  SETSYSTEM="TRUE"
			  SETSOURCE="FALSE"
			  SETCLASS="FALSE"
			  SETINSTANCE="FALSE"
			  SETMETRIC="FALSE"
			  METRICSET="FALSE"
			 } else {
			  if ( $1 == ":data_source" ) {
			   SETSYSTEM="FALSE"
			   SETSOURCE="TRUE"
			   SETCLASS="FALSE"
			   SETINSTANCE="FALSE"
			   SETMETRIC="FALSE"
			   METRICSET="FALSE"
			  } else {
			   if ( $1 == ":class_name" ) {
			    SETSYSTEM="FALSE"
			    SETSOURCE="FALSE"
			    SETCLASS="TRUE"
			    SETINSTANCE="FALSE"
			    SETMETRIC="FALSE"
			    METRICSET="FALSE"
			   } else {
			    if ( $1 == ":instance_name" ) {
			     SETSYSTEM="FALSE"
			     SETSOURCE="FALSE"
			     SETCLASS="FALSE"
			     SETINSTANCE="TRUE"
			     SETMETRIC="FALSE"
			     METRICSET="FALSE"
			    } else {
			     if ( $1 == ":metric_name" ) {
			      SETSYSTEM="FALSE"
			      SETSOURCE="FALSE"
			      SETCLASS="FALSE"
			      SETINSTANCE="FALSE"
			      SETMETRIC="TRUE"
			      METRICSET="TRUE"
			     } else {
#
# Check for name entries
#
			      if ( SETSYSTEM == "TRUE" ) {
			       SYSTEM=$0
			      }
			      if ( SETSOURCE == "TRUE" ) {
			       SOURCE=$0
			      }
			      if ( SETCLASS == "TRUE" ) {
			       CLASS=$0
			      }
			      if ( SETINSTANCE == "TRUE" ) {
			       INSTANCE=$0
			      }
			      if ( SETMETRIC == "TRUE" ) {
			       METRIC=$0
			      }
			      if ( METRICSET == "TRUE" ) {
			       PRINTMETRIC="TRUE"
			      }
			     }
			    }
			   }
			  }
			 }
#
# Print metric
#
			 if ( PRINTMETRIC == "TRUE" ) {
			  printf "%s:%s:%s:%s:%s\n",SYSTEM,SOURCE,CLASS,INSTANCE,METRIC
			  PRINTMETRIC="FALSE"
			 }
#
			}'
#
# Set up return status
#
 RETSTAT=0
}
#
# Start here
#
#
# Source setup file
#
. /etc/admintools.src
SHOWVERSION="FALSE"
#
# Set up user variables
#
METFILE="${LOCALETC}/metrics.cfg"
#
# Initialise exit status
#
let "EXITSTAT=0"
#
# Get command line options
#
USAGE="$0 [-f file] [-V Version]"
while getopts of:V OPT
do
 case $OPT in
#
# Invalid option
#
        \?)
                if [ -z "$OPTARG" ]
                then
                 echo $USAGE
                 _exit 2
                fi
        ;;
#
# Metrics file
#
	f)
		METFILE=$OPTARG
	;;
#
# Show version
#
	V)
		SHOWVERSION="TRUE"
	;;
 esac
done
#
# Check for show version
#
if [ "$SHOWVERSION" = "TRUE" ]
then
 echo "$VERSION"
 echo "$USAGE"
 _exit $EXITSTAT
fi
#
# Check bounds of FILE
#
if [ ! -r "$METFILE" ]
then
  echo "ERROR : File $METFILE does not exist or cannot be opened"
  EXITSTAT=3
 _exit $EXITSTAT
fi
#
# Do Main
#
_Main
let "EXITSTAT=EXITSTAT+RETSTAT"
#
# Exit
#
_exit $EXITSTAT
#
